<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Outgoing Page</title>
    <link rel="stylesheet" href="/main.css">
</head>
<body>

    </head> 
    <!-- Sidebar -->
    <%- include('partials/sidebar', { username: user.username, userid: user.userid }) %> 
    <!-- Main Content -->
    <div class="content-container">
        <!-- Buttons Below Top Bar -->
        
        <!-- Input Form -->
        <div class="form-container">
            <div class="form-row1">
                <div class="form-item">
                    <label for="todaydate">Date: <span id="todayDate"></span></label>
                </div>
                <div class="form-item">
                    <label for="transactionid">Transaction No: <%= nextTransactionId %></label>
                </div>
            </div>
            
            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    var today = new Date();
                    var dateString = today.toLocaleDateString();
                    document.getElementById('todayDate').textContent = dateString;
                });
            </script>
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row1">
                <div class="form-item">
                    <label for="store">Store</label>
                    <div>
                        <select id="store" name="store">
                            <option value="">Select Store</option>
                            <% stores.forEach(store => { %>
                                <option value="<%= store.storeid %>"><%= store.storename %></option>
                            <% }) %>
                        </select>
                        <button class="btn btn-store" onclick="location.href='/addstore'">New Store</button>
                    </div>
                </div>
                <div class="form-item">
                    <label for="category">Category</label>
                    <div>
                        <select id="category" name="category">
                            <option value="">Select Category</option>
                        </select>
                        <button class="btn btn-location" onclick="location.href='/addcategory'">New Category</button>
                    </div>
                </div>
                
            </div>
            <script>
                document.getElementById('store').addEventListener('change', async function () {
                    const storeId = this.value; // Get selected store ID
                    const categoryDropdown = document.getElementById('category');
                    
                    // Clear existing options
                    categoryDropdown.innerHTML = '<option value="">Select Category</option>';
            
                    if (storeId) {
                        try {
                            // Fetch categorys from the server
                            const response = await fetch(`/categorys/${storeId}`);
                            const categorys = await response.json();
            
                            // Populate category dropdown
                            categorys.forEach(category => {
                                const option = document.createElement('option');
                                option.value = category.categoryid;
                                option.textContent = category.categoryname;
                                categoryDropdown.appendChild(option);
                            });
                        } catch (error) {
                            console.error('Error fetching categorys:', error);
                        }
                    }
                });
            </script>
            
            <div class="breakLine">
                <hr>
            </div>
            <table id="itemTable" class="custom-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Item Name</th>
                        <th>Item Qty</th>
                        <th>Outgoing Qty</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows dynamically added here -->
                </tbody>
            </table>

            <div class="breakLine">
                <hr>
            </div>
            <table id="outgoingTable" class="custom-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Item Name</th>
                        <th>Store Name</th>
                        <th>Category Name</th>
                        <th>Outgoing Qty</th>
                        <th>Remaining Qty</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows dynamically added here -->
                </tbody>
            </table>
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row2">
                <label for="TotalQty" class="align-right">Total Quantity: <span id="totalQuantity">0</span></label>
            </div>
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row footer-buttons">
                <button class="btn btn-cancel" onclick="category.href='/dashboard'">Cancel</button>
                <button class="btn btn-save" type="submit">Save</button>
            </div>
        </div>
    </div>
    <script>
        document.getElementById('category').addEventListener('change', async function () {
            const categoryId = this.value; // Get the selected category ID
            const itemTableBody = document.getElementById('itemTable').getElementsByTagName('tbody')[0];
            
            // Clear existing rows in the itemTable
            itemTableBody.innerHTML = '';
    
            if (categoryId) {
                try {
                    // Fetch items from the server for the selected category
                    const response = await fetch(`/items/${categoryId}`);
                    const items = await response.json();
    
                    // Populate the itemTable with rows
                    items.forEach((item, index) => {
                        const row = document.createElement('tr');
    
                        row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${item.itemname}</td>
                            <td>${item.itemqty}</td>
                            <td>
                                <input type="number" class="outgoing-qty" min="0" max="${item.itemqty}" 
                                       oninput="validateOutgoingQty(this, ${item.itemqty})">
                            </td>
                            <td>
                                <input type="hidden" name="itemid" value="${item.itemid}">
                                <button class="btn btn-add" onclick="addToOutgoingTable(this)">Add</button>
                            </td>
                        `;
                        itemTableBody.appendChild(row);
                    });
                } catch (error) {
                    console.error('Error fetching items:', error);
                    alert('Failed to fetch items for the selected category.');
                }
            }
        });
    
        // Validate Outgoing Qty field to ensure it's within the valid range
        function validateOutgoingQty(input, maxQty) {
            let value = parseInt(input.value);
            if (value < 0 || isNaN(value)) {
                input.value = '';
            } else if (value > maxQty) {
                input.value = maxQty; // Restrict to the maximum available quantity
            }
        }
        function updateMaxInItemTable(itemId, remainingQty) {
            const itemTableBody = document.getElementById('itemTable').getElementsByTagName('tbody')[0];

            // Find the corresponding row in itemTable
            const itemRow = Array.from(itemTableBody.rows).find(row => {
                const rowItemId = row.querySelector('input[name="itemid"]').value;
                return rowItemId === itemId;
            });

            if (itemRow) {
                const outgoingQtyInput = itemRow.querySelector('.outgoing-qty');
                outgoingQtyInput.setAttribute('max', remainingQty); // Update the max attribute
                
            }
        }
    
        // Add an item from itemTable to outgoingTable
        function addToOutgoingTable(button) {
            const row = button.parentElement.parentElement; // Get the current row in itemTable
            const itemName = row.cells[1].textContent.trim();
            const itemQty = parseInt(row.cells[2].textContent.trim());
            const outgoingQtyInput = row.cells[3].querySelector('input');
            const outgoingQty = parseInt(outgoingQtyInput.value);

            if (!outgoingQty || outgoingQty <= 0) {
                alert('Please enter a valid outgoing quantity.');
                return;
            }

            const storeName = document.getElementById('store').options[document.getElementById('store').selectedIndex].text;
            const categoryName = document.getElementById('category').options[document.getElementById('category').selectedIndex].text;
            const categoryId = document.getElementById('category').value;
            const itemId = row.querySelector('input[name="itemid"]').value;

            const outgoingTableBody = document.getElementById('outgoingTable').getElementsByTagName('tbody')[0];

            // Check if the same itemid and categoryid exist in the outgoingTable
            const existingRow = Array.from(outgoingTableBody.rows).find(outRow => {
                const existingItemId = outRow.querySelector('input[name="itemid"]').value;
                const existingCategoryId = outRow.querySelector('input[name="categoryid"]').value;
                return existingItemId === itemId && existingCategoryId === categoryId;
            });

            let maxQty = itemQty; // Default max quantity
            

            if (existingRow) {
                // If the item exists in outgoingTable, calculate remaining quantity
                const remainingQty = parseInt(existingRow.cells[5].textContent);

                if (remainingQty === 0) {
                    alert('Cannot add more. Remaining quantity is 0.');
                    return;
                }

                maxQty = remainingQty; // Update max quantity to remaining qty

                // Update outgoing qty and remaining qty
                const currentOutgoingQty = parseInt(existingRow.cells[4].textContent);
                const newOutgoingQty = currentOutgoingQty + outgoingQty;

                if (newOutgoingQty > itemQty) {
                    alert('Outgoing quantity exceeds available quantity.');
                    return;
                }

                const newRemainingQty = itemQty - newOutgoingQty;

                existingRow.cells[4].textContent = newOutgoingQty;
                existingRow.cells[5].textContent = newRemainingQty;

                calculateTotalQuantity();
                outgoingQtyInput.value = ''; // Clear the input box after adding
                // Update the `max` attribute for the input in itemTable
                updateMaxInItemTable(itemId, newRemainingQty);

                // Update the max attribute of the outgoingQty input in itemTable
                outgoingQtyInput.setAttribute('max', newRemainingQty);
                return;
            }

            // If no existing row, add a new row to outgoingTable
            const rowCount = outgoingTableBody.rows.length;
            const remainingQty = itemQty - outgoingQty;

            if (remainingQty < 0) {
                alert('Outgoing quantity exceeds available quantity.');
                return;
            }

            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${rowCount + 1}</td>
                <td>${itemName}</td>
                <td>${storeName}</td>
                <td>${categoryName}</td>
                <td>${outgoingQty}</td>
                <td>${remainingQty}</td>
                <td>
                    <input type="hidden" name="itemid" value="${itemId}">
                    <input type="hidden" name="categoryid" value="${categoryId}">
                    <button class="btn-delete" onclick="deleteOutgoingRow(this)">X</button>
                </td>
            `;
            outgoingTableBody.appendChild(newRow);
            updateMaxInItemTable(itemId, remainingQty);
            if (outgoingTableBody.rows.length === 1) {
                document.getElementById('store').disabled = true;
                document.getElementById('category').disabled = true;
            }
            calculateTotalQuantity();
            outgoingQtyInput.value = ''; // Clear the input box after adding
            

            // Update the max attribute of the outgoingQty input in itemTable
            outgoingQtyInput.setAttribute('max', remainingQty);
            
        }
    
        // Delete a row from outgoingTable
        function deleteOutgoingRow(button) {
            const row = button.parentElement.parentElement; // Get the current row
            const table = row.parentElement; // Get the table body
            table.removeChild(row);
            
            const itemId = row.querySelector('input[name="itemid"]').value;
            const currentQty = parseInt(row.cells[4].textContent); // Transfer qty
            const remainingQty = parseInt(row.cells[5].textContent) + currentQty;
            updateMaxInItemTable(itemId, remainingQty);
            // Update row numbers
            Array.from(table.rows).forEach((row, index) => {
                row.cells[0].textContent = index + 1;
            });

            // Recalculate Total Quantity
            calculateTotalQuantity();
            if (table.rows.length === 0) {
                document.getElementById('store').disabled = false;
                document.getElementById('category').disabled = false;
            }
        }
    
        // Calculate total quantity of outgoing items
        function calculateTotalQuantity() {
            const outgoingTableBody = document.getElementById('outgoingTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(outgoingTableBody.rows);

            const totalQuantity = rows.reduce((sum, row) => {
                const outgoingQty = parseInt(row.cells[4].textContent.trim()) || 0;
                return sum + outgoingQty;
            }, 0);

            document.getElementById('totalQuantity').textContent = totalQuantity;
        }
        
        document.getElementById('itemTable').addEventListener('input', function (event) {
            if (event.target.classList.contains('outgoing-qty')) {
                const input = event.target;
                const max = parseInt(input.getAttribute('max'));

                if (parseInt(input.value) > max) {
                    input.value = max;
                }
            }
        });

        document.querySelector('.btn-save').addEventListener('click', async function () {
            const outgoingTableBody = document.getElementById('outgoingTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(outgoingTableBody.rows);

            if (rows.length === 0) {
                alert('No items to save.');
                return;
            }

            // Collect transaction data
            const transactionId = parseInt(document.querySelector('label[for="transactionid"]').textContent.split(': ')[1]);
            const tranName = 'OUT';
            const tranDate = new Date().toISOString().slice(0, 19).replace('T', ' '); // Current date and time
            const totalQty = parseInt(document.getElementById('totalQuantity').textContent);

            // Collect outgoing items data
            const outgoingItems = rows.map(row => ({
                itemId: row.querySelector('input[name="itemid"]').value, // Hidden itemid
                categoryId: row.querySelector('input[name="categoryid"]').value, // Hidden categoryid
                outgoingQty: parseInt(row.cells[4].textContent.trim()), // Outgoing qty
                remainingQty: parseInt(row.cells[5].textContent.trim()), // Remaining qty
            }));

            try {
                // Send data to the backend
                const response = await fetch('/out', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        nextTransactionId: transactionId,
                        tranName,
                        tranDate,
                        totalQty,
                        outgoingItems,
                    }),
                });

                if (response.ok) {
                    alert('Transaction successfully saved.');
                    window.location.reload(); // Reload the page to reset the form
                } else {
                    const errorText = await response.text();
                    alert(`Failed to save transaction: ${errorText}`);
                }
            } catch (error) {
                console.error('Error saving transaction:', error);
                alert('An error occurred while saving the transaction.');
            }
        });
    </script>
    

</body>
</html>