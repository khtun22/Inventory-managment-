<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Adjustment Page</title>
    <link rel="stylesheet" href="/main.css">
</head>
<body>

    </head> 
    <!-- Sidebar -->
    <%- include('partials/sidebar', { username: user.username, userid: user.userid }) %> 
    <!-- Main Content -->
    <div class="content-container">
        <!-- Buttons Below Top Bar -->
        
        <!-- Input Form -->
        <div class="form-container">
            <div class="form-row1">
                <div class="form-item">
                    <label for="todaydate">Date: <span id="todayDate"></span></label>
                </div>
                <div class="form-item">
                    <label for="adjustmentid">Adjustment No: <%= nextAdjustmentId %></label>
                </div>
            </div>
            
            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    var today = new Date();
                    var dateString = today.toLocaleDateString();
                    document.getElementById('todayDate').textContent = dateString;
                });
            </script>
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row3">
                <div class="form-item">
                    <label for="reason">Reason</label>
                    <select id="reason" name="reason">
                        <option value="">-</option>
                        <option value="damage">Damaged</option>
                        <option value="lost">Lost</option>
                        <option value="expired">Expired</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="restocked">Restocked</option>
                    </select>
                </div>
                <div class="form-item">
                    <label for="description">Description</label>
                    <input type="text" id="description" name="description" placeholder="Enter description">
                </div>
            </div>
            
            
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row3">
                
                <div class="form-item">
                    <label for="store">Store</label>
                    <select id="store" name="store">
                        <option value="">Select Store</option>
                        <% stores.forEach(store => { %>
                            <option value="<%= store.storeid %>"><%= store.storename %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="form-item">
                    <label for="category">Category</label>
                    <select id="category" name="category">
                        <option value="">Select Category</option>
                    </select>  
                </div>
            </div>
            <script>
                document.getElementById('store').addEventListener('change', async function () {
                    const storeId = this.value; // Get selected store ID
                    const categoryDropdown = document.getElementById('category');
                    
                    // Clear existing options
                    categoryDropdown.innerHTML = '<option value="">Select Category</option>';
            
                    if (storeId) {
                        try {
                            // Fetch categorys from the server
                            const response = await fetch(`/categorys/${storeId}`);
                            const categorys = await response.json();
            
                            // Populate category dropdown
                            categorys.forEach(category => {
                                const option = document.createElement('option');
                                option.value = category.categoryid;
                                option.textContent = category.categoryname;
                                categoryDropdown.appendChild(option);
                            });
                        } catch (error) {
                            console.error('Error fetching categorys:', error);
                        }
                    }
                });
            </script>
            <div class="breakLine">
                <hr>
            </div>
            
            <table id="itemTable" class="custom-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Item Name</th>
                        <th>Item Qty</th>
                        <th>Adjust Qty</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows dynamically added here -->
                </tbody>
            </table>

            <div class="breakLine">
                <hr>
            </div>
            <table id="adjustmentTable" class="custom-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Item Name</th>
                        <th>Store Name</th>
                        <th>Category Name</th>
                        <th>Adjusted Qty</th>
                        <th>Original Qty</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows dynamically added here -->
                </tbody>
            </table>
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row2">
                <label for="TotalQty" class="align-right">Total Quantity: <span id="totalQuantity">0</span></label>
            </div>
            <div class="breakLine">
                <hr>
            </div>
            <div class="form-row footer-buttons">
                <button class="btn btn-cancel" onclick="category.href='/dashboard'">Cancel</button>
                <button class="btn btn-save" type="submit">Save</button>
            </div>
        </div>
    </div>
    <script>
        document.getElementById('category').addEventListener('change', async function () {
            const categoryId = this.value; // Get the selected category ID
            const itemTableBody = document.getElementById('itemTable').getElementsByTagName('tbody')[0];
            
            // Clear existing rows in the itemTable
            itemTableBody.innerHTML = '';
    
            if (categoryId) {
                try {
                    // Fetch items from the server for the selected category
                    const response = await fetch(`/items01/${categoryId}`);
                    const items = await response.json();
    
                    // Populate the itemTable with rows
                    items.forEach((item, index) => {
                        const row = document.createElement('tr');
    
                        row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${item.itemname}</td>
                            <td>${item.itemqty}</td>
                            <td>
                                <input type="number" class="outgoing-qty" min="0" max="10000" oninput="validateNumberInput(this)" 
                                        value="${item.itemqty}">
                            </td>
                            <td>
                                <input type="hidden" name="itemid" value="${item.itemid}">
                                <button class="btn btn-add" onclick="addToAdjustmentTable(this)">Add</button>
                            </td>
                        `;
                        itemTableBody.appendChild(row);
                    });
                } catch (error) {
                    console.error('Error fetching items:', error);
                    alert('Failed to fetch items for the selected category.');
                }
            }
        });

        function validateNumberInput(input) {
            let value = parseInt(input.value, 10);

            if (isNaN(value) || value < input.min) {
                input.value = input.min; // Set to min if below limit
            } else if (value > input.max) {
                input.value = input.max; // Set to max if exceeded
            }
        }
        
        // Add an item from itemTable to adjustmentTable
        function addToAdjustmentTable(button) {
            const row = button.parentElement.parentElement; // Get the current row in itemTable
            const itemName = row.cells[1].textContent.trim();
            
            const itemQty = parseInt(row.cells[2].textContent.trim());
            const adjustmentQtyInput = row.cells[3].querySelector('input');
            const adjustmentQty = parseInt(adjustmentQtyInput.value);

            if (!adjustmentQty || adjustmentQty <= 0) {
                alert('Please enter a valid adjustment quantity.');
                return;
            }
            const reason = document.getElementById('reason').value;

            if (!reason) {
                alert('Please select reason.');
                return;
            }

            const storeName = document.getElementById('store').options[document.getElementById('store').selectedIndex].text;
            const categoryName = document.getElementById('category').options[document.getElementById('category').selectedIndex].text;
            const categoryId = document.getElementById('category').value;
            const itemId = row.querySelector('input[name="itemid"]').value;

            const adjustmentTableBody = document.getElementById('adjustmentTable').getElementsByTagName('tbody')[0];

            // Check if the same itemid and categoryid exist in the adjustmentTable
            const existingRow = Array.from(adjustmentTableBody.rows).find(outRow => {
                const existingItemId = outRow.querySelector('input[name="itemid"]').value;
                const existingCategoryId = outRow.querySelector('input[name="categoryid"]').value;
                return existingItemId === itemId && existingCategoryId === categoryId;
            });

            let maxQty = itemQty; // Default max quantity

            if (existingRow) {
                // If the item exists in adjustmentTable, calculate remaining quantity
                const remainingQty = parseInt(existingRow.cells[5].textContent);

                maxQty = remainingQty; // Update max quantity to remaining qty

                // Update adjustment qty and remaining qty
                const currentAdjustmentQty = parseInt(existingRow.cells[4].textContent);
                const newAdjustmentQty = currentAdjustmentQty + adjustmentQty;

                const newRemainingQty = itemQty - newAdjustmentQty;

                existingRow.cells[4].textContent = newAdjustmentQty;
                existingRow.cells[5].textContent = newRemainingQty;

                calculateTotalQuantity();
                adjustmentQtyInput.value = ''; // Clear the input box after adding

                // Update the max attribute of the adjustmentQty input in itemTable
                adjustmentQtyInput.setAttribute('max', newRemainingQty);
                
                return;
            }

            // If no existing row, add a new row to adjustmentTable
            const rowCount = adjustmentTableBody.rows.length;
            const remainingQty = itemQty - adjustmentQty;

            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${rowCount + 1}</td>
                <td>${itemName}</td>
                <td>${storeName}</td>
                <td>${categoryName}</td>
                <td>${adjustmentQty}</td>
                <td>${itemQty}</td>
                <td>
                    <input type="hidden" name="itemid" value="${itemId}">
                    <input type="hidden" name="categoryid" value="${categoryId}">
                    <button class="btn-delete" onclick="deleteAdjustmentRow(this)">X</button>
                </td>
            `;
            adjustmentTableBody.appendChild(newRow);
            if (adjustmentTableBody.rows.length === 1) {
                document.getElementById('reason').disabled = true;
                document.getElementById('description').disabled = true;
                document.getElementById('store').disabled = true;
                document.getElementById('category').disabled = true;
            }

            calculateTotalQuantity();
            adjustmentQtyInput.value = ''; // Clear the input box after adding

            // Update the max attribute of the adjustmentQty input in itemTable
            adjustmentQtyInput.setAttribute('max', remainingQty);
            
        }
    
        // Delete a row from adjustmentTable
        function deleteAdjustmentRow(button) {
            const row = button.parentElement.parentElement; // Get the current row
            const table = row.parentElement; // Get the table body
            table.removeChild(row);

            // Update row numbers
            Array.from(table.rows).forEach((row, index) => {
                row.cells[0].textContent = index + 1;
            });

            // Recalculate Total Quantity
            calculateTotalQuantity();
            if (table.rows.length === 0) {
                document.getElementById('reason').disabled = false;
                document.getElementById('description').disabled = false;
                document.getElementById('store').disabled = false;
                document.getElementById('category').disabled = false;
            }
        }
    
        // Calculate total quantity of adjustment items
        function calculateTotalQuantity() {
            const adjustmentTableBody = document.getElementById('adjustmentTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(adjustmentTableBody.rows);

            const totalQuantity = rows.reduce((sum, row) => {
                const adjustmentQty = parseInt(row.cells[4].textContent.trim()) || 0;
                return sum + adjustmentQty;
            }, 0);

            document.getElementById('totalQuantity').textContent = totalQuantity;
        }

        document.querySelector('.btn-save').addEventListener('click', async function () {
            const adjustmentTableBody = document.getElementById('adjustmentTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(adjustmentTableBody.rows);

            if (rows.length === 0) {
                alert('No items to save.');
                return;
            }

            // Collect transaction data
            const adjustmentId = parseInt(document.querySelector('label[for="adjustmentid"]').textContent.split(': ')[1]);
            const reason = document.getElementById('reason').value;
            const description = document.getElementById('expireDate').value;
            const adjDate = new Date().toISOString().slice(0, 19).replace('T', ' '); // Current date and time
            const totalQty = parseInt(document.getElementById('totalQuantity').textContent);

            // Collect outgoing items data
            const adjustmentItems = rows.map(row => ({
                itemId: row.querySelector('input[name="itemid"]').value, // Hidden itemid
                categoryId: row.querySelector('input[name="categoryid"]').value, // Hidden categoryid
                adjustmentQty: parseInt(row.cells[4].textContent.trim()), // Outgoing qty
            }));

            try {
                // Send data to the backend
                const response = await fetch('/adjustment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        nextAdjustmentId: adjustmentId,
                        reason,
                        description,
                        adjDate,
                        totalQty,
                        adjustmentItems,
                    }),
                });

                if (response.ok) {
                    alert('Transaction successfully saved.');
                    window.location.reload(); // Reload the page to reset the form
                } else {
                    const errorText = await response.text();
                    alert(`Failed to save transaction: ${errorText}`);
                }
            } catch (error) {
                console.error('Error saving transaction:', error);
                alert('An error occurred while saving the transaction.');
            }
        });
    </script>
</body>
</html>